
.view {
  display: flex;
  flex-direction: column;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  min-height: 100%;
  background-color: var(--main-background);
  transform: translateX(0%);
  will-change: transform;
  opacity: 1;
  z-index: 1;
  overflow-x: hidden;
  transition: transform .3s cubic-bezier(0.465, 0.183, 0.153, 0.946);
}

.view::after {
  content: "";
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #000000;
  opacity: 0;
}

.view.prev-screen {
  z-index: 0;
  transform: translateX(-20%);
  position: relative;
}

.view.next-screen {
  transform: translateX(100%);
  z-index: 2
}

html[ssg] .view.next-screen {
  transform: translateX(0%);
}

.view.active::after {
  display: none;
}

.view.prev-screen::after {
  animation-name: fadein;
  animation-duration: .3s;
  animation-timing-function: ease-out;
}

.view.current::after {
  animation-name: fadeout;
  animation-duration: .3s;
  animation-timing-function: ease-out;
}

@media screen and (min-width: 1024px) {
  .view,
  .view.prev-screen,
  .view.next-screen {
    transform: none;
  }

  .view {
    transition: opacity .3s cubic-bezier(0.465, 0.183, 0.153, 0.946);
  }

  .view.prev-screen,
  .view.next-screen {
    opacity: 0;
  }
}

/* .view.next-screen stays in DOM, so remove pointer-events */
.view.active + .view.next-screen,
.view.next-screen + .view.next-screen {
  pointer-events: none;
}

.view .content {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  padding: 15px;
  height: 1px;
  overflow-y: auto;
}

.view .content p {
  max-width: 80ch;
}

.documentation {
  margin-top: 25px;
}

@supports (padding: max(0px)) {
   @media screen and (orientation: portrait) {
     .view .content {
        padding-bottom: calc(2 * env(safe-area-inset-bottom));
      }
   }

  @media screen and (orientation: landscape) and (max-width: 1320px) {
    .view .content {
      padding-left: env(safe-area-inset-left);
      padding-right: env(safe-area-inset-right);
    }
  }
}


@media screen and (min-width: 1024px) {
  .view .content {
    padding-left: 30px;
    padding-right: 30px;
  }
}


@keyframes fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.25;
  }
}

@keyframes fadeout {
  from {
    opacity: 0.25;
  }
  to {
    opacity: 0;
  }
}


material-app-bar {
  --app-bar-background: var(--base-1);
}

@media (display-mode: tabbed) {
  material-app-bar {
    margin-top: 1px;
  }
}

a.back, a.back:visited, a.back:active {
  color: var(--base-font-color);
}


.view.home {
  background-color: var(--main-background);
}

.view h2 {
  margin-top: 12px;
  margin-bottom: 0;
  font-size: var(--h2-font-size);
}

.view h3 {
  margin-bottom: 0;
  font-size: var(--h3-font-size);
}

.view h3 + p {
  margin-top: 5px;
}

.view p {
  font: var(--p-font-size);
  line-height: 1.5rem;
}

.img {
  text-align: center;
}

.img img {
  border: 1px solid #cccccc;
}

.no-support,
.no-support-ios,
.no-support-surface-control,
.no-support-screencapture {
  color: #ff0000;
  font-style: italic;
  display: none;
}

#apple-pay-support {
  display: none;
}

#payment-support {
  display: none;
}

.partial-support {
  color: orange;
  font-style: italic;
  display: none;
}

@media (prefers-color-scheme: dark) {
  .no-support {
    color: #ffa600;
  }
}

ul {
  margin: 0;
  padding-left: 20px;
}

li {
  margin-bottom: 10px;
}

.error {
  color: #ff0000;
  font-weight: bold;
}

#contact-form {
  max-width: 80ch;
  margin-bottom: 50px;
}

#contact-form textarea {
  width: 99%;
  resize: none;
  border-radius: 2px;
  border: 1px solid #cecece;
  background-color: var(--main-background);
}

#contact-form material-button {
  --font-color: var(--base-font-color);
  --button-color: var(--base-1);
}

#contact-form material-textfield:first-of-type {
  --margin: 1rem 0 2.25rem 0;
}

.flex {
  display: flex;
  flex-direction: row;
}

#result {
  padding-left: 10px;
}

textarea {
  font-size: 1em;
  color: var(--base-font-color);
}

a, a:visited, a:active {
  color: var(--base-link-color);
}

.code {
  position: relative;
  margin-top: 1.5em;
}

code {
  border: 1px solid #cccccc;
  display: inline-block;
  padding-inline: 0.2rem;
  border-radius: 5px;
  line-height: 1.5;
  color: var(--font-color);
  word-break: break-word;
}

.copy-code {
  position: absolute;
  top: 0;
  right: 0;
  --button-color: transparent;
}

@media screen and (min-width: 1024px) {
  code {
    white-space: nowrap;
    word-break: normal;
  }

  device-orientation,
  device-motion {
    width: 50%;
    margin: 0 auto;
  }

  multi-touch {
    margin: 0 auto;
  }
}

.buttons {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  gap: .5rem;
}

#send {
  margin-top: 0.5em;
}

[hidden] {
  display: none !important;
}
.disabled, [disabled] {
  pointer-events: none !important;
  opacity: 0.5!important;
}
#enable-sensors {
  display: none;
}
#enable-sensors {
  display: none;
}

.email-list {
  display: flex;
  border-radius: 8px;
  border: 1px solid #cccccc;
  padding: 8px;

  &:focus-within {
    outline: 1px solid var(--base-1);
  }

  input {
    flex-grow: 1;
    border: none;

    &:focus {
      outline: none;
    }
  }
}

form-field {
  display: block;
  width: 100%;
}
#error {
  display: none;
  margin-top: 1em;
  font-weight: bold;
  border: 1px solid #609e60;
  max-width: 80ch;
  padding: 8px;
  color: #609e60;
}

#info {
  margin-top: 1em;
  font-weight: bold;
}

#subscribe-button svg {
  display: none;
}

#subscribe-button.subscribing {
  pointer-events: none;

  svg {
    display: block;
  }
}

svg {
  animation: 2s linear infinite svg-animation;
  width: 18px;
}

circle {
  animation: 1.4s ease-in-out infinite both circle-animation;
  display: block;
  fill: transparent;
  stroke: #000000;
  stroke-linecap: round;
  stroke-dasharray: 283;
  stroke-dashoffset: 280;
  stroke-width: 12px;
  transform-origin: 50% 50%;
}

code-snippet {
  max-width: 80ch;
}

@keyframes svg-animation {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg)
  }
}

@keyframes circle-animation {
  0%,
  25% {
    stroke-dashoffset: 280;
    transform: rotate(0);
  }

  50%,
  75% {
    stroke-dashoffset: 75;
    transform: rotate(45deg);
  }

  100% {
    stroke-dashoffset: 280;
    transform: rotate(360deg);
  }
}
